(function(F, E, D, A) {
    var G = "placeholder",
    C = {
        className: "ui-placeholder",
        blurCallback: F.noop,
        focusCallback: F.noop
    };
    var B = function() {
        var I = "placeholder" in D.createElement("input");
        return I
    };
    var H = function(J, I) {
        this.opts = F.extend({},
        C, I || {});
        this.$elem = F(J);
        this.init()
    };
    H.prototype = {
        constructor: H,
        init: function() {
            this.render()
        },
        render: function() {
            this.show();
            this.events.focus.call(this);
            this.events.blur.call(this)
        },
        events: {
            focus: function() {
                var J = this.$elem.attr("type") !== "password";
                if (B() || !J) {
                    return
                }
                var I = this;
                this.$elem.focus(function() {
                    var K = F(this);
                    if (this.value === K.attr("placeholder")) {
                        this.value = ""; 
                        K.removeClass(I.opts.className);
                        if (I.opts.focusCallback === "function") {
                            I.opts.focusCallback.call(this, F(this))
                        }
                    }
                })
            },
            blur: function() {
                var J = this.$elem.attr("type") !== "password";
                if (B() || !J) {
                    return
                }
                var I = this;
                this.$elem.blur(function() {
                    var K = F(this);
                    if (this.value === "") {
                        this.value = K.attr("placeholder") || "";
                        
                    }

                    if (this.value === "" || this.value === K.attr("placeholder")) {
                        K.addClass(I.opts.className).val(K.attr("placeholder"));
                        if (I.opts.blurCallback === "function") {
                            I.opts.blurCallback.call(this, F(this));
                        }
                    } else {
                        if (this.value !== K.attr("placeholder")) {
                            K.removeClass(I.opts.className);
                        } else {
                            return false
                        }
                    }
                })
            }
        },
        show: function() {
            var I = this.$elem.val(),
            J = this.$elem.attr("placeholder"),
            K = this.$elem.attr("type") !== "password";
            if (!B() && K && J && I === "") {
                this.$elem.addClass(this.opts.className).val(J)
            }
        }
    };
    F.fn[G] = function(I) {
        if (typeof I === "object" || !I) {
            return this.each(function() {
                var J = F(this);
                if (!J.data("plugin_" + G)) {
                    J.data("plugin_" + G, new H(this, I))
                }
            })
        }
        return this
    }
} (jQuery, window, document));